import geopandas as gpd
from shapely.geometry import Point, Polygon, LineString
import numpy as np

# Load building polygon
building_gdf = gpd.read_file("building_polygon.geojson")

# Define building and tower height
building_height = 100
tower_height = 110

# Step 1: Generate a buffer around the building at 750m
buffer_gdf = building_gdf.buffer(750)

# Step 2: Generate sightlines
tower_location = building_gdf.centroid.iloc[0]  # Assume tower at centroid

num_rays = 360  # Define the number of sightlines (one per degree)
rays = []

for angle in np.linspace(0, 360, num_rays):
    # Generate a point on the buffer at a given angle
    x = tower_location.x + 750 * np.cos(np.radians(angle))
    y = tower_location.y + 750 * np.sin(np.radians(angle))
    
    sightline = LineString([tower_location, (x, y)])
    rays.append(sightline)

# Convert rays to GeoDataFrame
rays_gdf = gpd.GeoDataFrame(geometry=rays, crs=building_gdf.crs)

# Step 3: Find obstructed rays (those that intersect the building)
obstructed_rays = rays_gdf[rays_gdf.intersects(building_gdf.unary_union)]

# Step 4: Compute the visible area
visible_area = buffer_gdf.difference(obstructed_rays.unary_union)

# Step 5: Compute the non-visible area
non_visible_area = buffer_gdf.difference(visible_area)

# Save results
visible_area_gdf = gpd.GeoDataFrame(geometry=[visible_area], crs=building_gdf.crs)
non_visible_area_gdf = gpd.GeoDataFrame(geometry=[non_visible_area], crs=building_gdf.crs)

visible_area_gdf.to_file("visible_area.geojson", driver="GeoJSON")
non_visible_area_gdf.to_file("non_visible_area.geojson", driver="GeoJSON")

# Optional: Plot results
import matplotlib.pyplot as plt
fig, ax = plt.subplots()
buffer_gdf.plot(ax=ax, color='lightgrey', edgecolor='black', alpha=0.5)
building_gdf.plot(ax=ax, color='black', edgecolor='black')
rays_gdf.plot(ax=ax, color='blue', alpha=0.3)
obstructed_rays.plot(ax=ax, color='red', alpha=0.8)
non_visible_area_gdf.plot(ax=ax, color='green', alpha=0.5)

plt.show()
